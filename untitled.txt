import React, { useState, useEffect } from 'react';
import { NavLink, useLocation } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FiHome, FiUsers, FiShoppingBag, FiFilm, 
  FiPackage, FiActivity, FiAward,
  FiSettings, FiHelpCircle, FiLogOut,
  FiChevronLeft, FiChevronRight, FiMenu, FiX
} from 'react-icons/fi';
import { useMediaQuery } from 'react-responsive';

const Sidebar = () => {
  const [isExpanded, setIsExpanded] = useState(true);
  const [mobileOpen, setMobileOpen] = useState(false);
  const location = useLocation();
  const isMobile = useMediaQuery({ maxWidth: 768 });

  // Close mobile menu when route changes
  useEffect(() => {
    setMobileOpen(false);
  }, [location]);

  const navItems = [
    { name: 'Dashboard', path: '/', icon: <FiHome className="w-5 h-5" /> },
    { name: 'User Management', path: '/users', icon: <FiUsers className="w-5 h-5" /> },
    // ... other nav items
  ];

  const toggleSidebar = () => {
    if (isMobile) {
      setMobileOpen(prev => !prev); // Proper state toggle
    } else {
      setIsExpanded(prev => !prev);
    }
  };

  // Mobile menu button component
  const MobileMenuButton = () => (
    <button
      onClick={toggleSidebar}
      className="fixed z-40 top-4 left-4 p-2 rounded-md bg-gray-900 text-white md:hidden"
      aria-label="Toggle menu"
    >
      {mobileOpen ? (
        <FiX className="w-6 h-6" />
      ) : (
        <FiMenu className="w-6 h-6" />
      )}
    </button>
  );

  const sidebarContent = (
    <div className="flex flex-col h-full">
      {/* Logo / Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-800">
        {isExpanded && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="flex items-center"
          >
            <div className="w-8 h-8 rounded-md bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center mr-2">
              <FiActivity className="text-white w-4 h-4" />
            </div>
            <h1 className="text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              Trendo
            </h1>
          </motion.div>
        )}
        {!isMobile && (
          <button
            onClick={toggleSidebar}
            className="p-1 rounded-md hover:bg-gray-800 text-gray-400 hover:text-white transition-colors"
            aria-label={isExpanded ? "Collapse sidebar" : "Expand sidebar"}
          >
            {isExpanded ? (
              <FiChevronLeft className="w-5 h-5" />
            ) : (
              <FiChevronRight className="w-5 h-5" />
            )}
          </button>
        )}
      </div>

      {/* Main Navigation */}
      <nav className="flex-1 overflow-y-auto py-4 px-2">
        <ul className="space-y-1">
          {navItems.map((item) => (
            <motion.li key={item.name} whileHover={{ scale: 1.02 }}>
              <NavLink
                to={item.path}
                onClick={handleNavClick}
                className={({ isActive }) => 
                  `flex items-center rounded-lg p-3 transition-colors ${
                    isActive 
                      ? 'bg-gradient-to-r from-blue-500/20 to-blue-600/20 text-blue-400 border-l-4 border-blue-500' 
                      : 'text-gray-400 hover:bg-gray-800 hover:text-white'
                  }`
                }
              >
                <span className={`${isExpanded ? 'mr-3' : 'mx-auto'}`}>
                  {React.cloneElement(item.icon, { 
                    className: `${item.icon.props.className} flex-shrink-0` 
                  })}
                </span>
                <AnimatePresence>
                  {isExpanded && (
                    <motion.span
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: -10 }}
                      transition={{ duration: 0.2 }}
                      className="whitespace-nowrap"
                    >
                      {item.name}
                    </motion.span>
                  )}
                </AnimatePresence>
              </NavLink>
            </motion.li>
          ))}
        </ul>
      </nav>

      {/* Secondary Navigation */}
      <div className="border-t border-gray-800 pt-2 pb-4 px-2">
        <ul className="space-y-1">
          {secondaryItems.map((item) => (
            <motion.li key={item.name} whileHover={{ scale: 1.02 }}>
              <NavLink
                to={item.path}
                onClick={handleNavClick}
                className={({ isActive }) => 
                  `flex items-center rounded-lg p-3 transition-colors ${
                    isActive 
                      ? 'bg-gray-800 text-white' 
                      : 'text-gray-400 hover:bg-gray-800 hover:text-white'
                  }`
                }
              >
                <span className={`${isExpanded ? 'mr-3' : 'mx-auto'}`}>
                  {React.cloneElement(item.icon, { 
                    className: `${item.icon.props.className} flex-shrink-0` 
                  })}
                </span>
                <AnimatePresence>
                  {isExpanded && (
                    <motion.span
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: -10 }}
                      transition={{ duration: 0.2 }}
                      className="whitespace-nowrap"
                    >
                      {item.name}
                    </motion.span>
                  )}
                </AnimatePresence>
              </NavLink>
            </motion.li>
          ))}
        </ul>
      </div>

      {/* User Profile */}
      <div className="border-t border-gray-800 p-4">
        <div className="flex items-center">
          <div className="w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center text-white">
            AU
          </div>
          {isExpanded && (
            <motion.div
              initial={{ opacity: 0, x: -10 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -10 }}
              transition={{ duration: 0.2 }}
              className="ml-3 overflow-hidden"
            >
              <p className="font-medium text-white truncate">Admin User</p>
              <p className="text-xs text-gray-400 truncate">admin@trendo.com</p>
            </motion.div>
          )}
        </div>
        {isExpanded && (
          <motion.button
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            whileHover={{ x: 2 }}
            className="flex items-center mt-4 text-sm text-gray-400 hover:text-white transition-colors"
            onClick={handleNavClick}
          >
            <FiLogOut className="mr-2" />
            Sign Out
          </motion.button>
        )}
      </div>
    </div>
  );

  return (
    <>
      <MobileMenuButton />

      {/* Mobile Sidebar Overlay and Menu */}
      <AnimatePresence>
        {mobileOpen && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 z-30 md:hidden"
              onClick={() => setMobileOpen(false)}
            />
            
            <motion.aside
              initial={{ x: '-100%' }}
              animate={{ x: 0 }}
              exit={{ x: '-100%' }}
              transition={{ type: 'spring', stiffness: 300, damping: 30 }}
              className="fixed inset-y-0 left-0 z-40 w-64 bg-gray-900 border-r border-gray-800 flex flex-col shadow-xl"
            >
              {sidebarContent}
            </motion.aside>
          </>
        )}
      </AnimatePresence>

      {/* Desktop Sidebar */}
      {!isMobile && (
        <motion.aside
          animate={{ width: isExpanded ? '16rem' : '5rem' }}
          className="hidden md:flex flex-col h-full bg-gray-900 border-r border-gray-800 overflow-hidden"
        >
          {sidebarContent}
        </motion.aside>
      )}
    </>
  );
};

export default Sidebar;